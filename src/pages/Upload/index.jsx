import { h } from 'preact';
import { useState } from 'preact/hooks';
import * as XLSX from 'xlsx'; // Import th∆∞ vi·ªán xlsx
import exampleTemplate from '../../assets/quiz-template.xlsx?url';

export default function UploadPage() {
    const [subjectName, setSubjectName] = useState('');
    const [subjectCode, setSubjectCode] = useState('');
    const [file, setFile] = useState(null);
    const [message, setMessage] = useState('');
    const [questions, setQuestions] = useState([]); // Th√™m state ƒë·ªÉ l∆∞u c√¢u h·ªèi
    const [isDownloadEnabled, setIsDownloadEnabled] = useState(false); // Tr·∫°ng th√°i enable n√∫t download

    const handleFileChange = (e) => {
        const uploadedFile = e.target.files[0];
        const fileExtension = uploadedFile?.name.split('.').pop().toLowerCase();

        if (fileExtension !== 'xlsx') {
            setMessage('‚ùå Vui l√≤ng ch·ªçn file Excel (.xlsx).');
            setFile(null);
            return;
        }

        setFile(uploadedFile);
        setMessage(''); // X√≥a th√¥ng b√°o l·ªói n·∫øu file h·ª£p l·ªá
    };

    const handleUpload = async () => {
        if (!subjectName || !subjectCode || !file) {
            setMessage('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin v√† ch·ªçn file.');
            return;
        }

        try {
            // ƒê·ªçc file Excel
            const reader = new FileReader();
            reader.onload = (e) => {
                const data = e.target.result;
                const workbook = XLSX.read(data, { type: 'binary' });

                // L·∫•y sheet ƒë·∫ßu ti√™n
                const sheet = workbook.Sheets[workbook.SheetNames[0]];

                // Chuy·ªÉn ƒë·ªïi sheet th√†nh m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng
                const fileData = XLSX.utils.sheet_to_json(sheet, { header: 1 });

                // Ki·ªÉm tra d√≤ng ƒë·∫ßu ti√™n c√≥ ƒë√∫ng c·∫•u tr√∫c kh√¥ng
                const firstRow = fileData[0]; // D√≤ng ƒë·∫ßu ti√™n
                const requiredHeaders = ['Question', 'a', 'b', 'c', 'd', 'Ans'];

                const isValidFormat = requiredHeaders.every((header, index) => header === firstRow[index]);

                if (!isValidFormat) {
                    setMessage('‚ùå D√≤ng ƒë·∫ßu ti√™n kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. C·∫ßn c√≥ c√°c c·ªôt: Question, a, b, c, d, Ans.');
                    setQuestions([]);
                    return;
                }

                // Chuy·ªÉn d·ªØ li·ªáu th√†nh c√¢u h·ªèi
                const questionsData = fileData.slice(1).map((row) => ({
                    question: row[0],
                    a: row[1],
                    b: row[2],
                    c: row[3],
                    d: row[4],
                    ans: row[5],
                }));

                setQuestions(questionsData); // C·∫≠p nh·∫≠t c√¢u h·ªèi v√†o state
                setIsDownloadEnabled(true); // B·∫≠t n√∫t t·∫£i JSON khi chuy·ªÉn ƒë·ªïi th√†nh c√¥ng
                setMessage(`‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!`);
            };

            reader.readAsBinaryString(file); // ƒê·ªçc file nh∆∞ m·ªôt chu·ªói nh·ªã ph√¢n
        } catch (err) {
            console.error(err);
            setMessage('‚ùå L·ªói khi x·ª≠ l√Ω file. ƒê·∫£m b·∫£o file ƒë√∫ng ƒë·ªãnh d·∫°ng.');
        }
    };

    const handleDownloadJson = () => {
        const fileName = `${subjectCode}.json`;

        const blob = new Blob([JSON.stringify(questions, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        a.click();

        URL.revokeObjectURL(url);
    };

    const handleDownloadTemplate = async () => {
        try {
            const response = await fetch(exampleTemplate);
            const blob = await response.blob();
            const url = URL.createObjectURL(blob);

            const a = document.createElement('a');
            a.href = url;
            a.download = 'quiz-template.xlsx';
            a.click();

            URL.revokeObjectURL(url);
        } catch (err) {
            console.error('L·ªói khi t·∫£i file m·∫´u:', err);
            setMessage('‚ùå Kh√¥ng th·ªÉ t·∫£i file m·∫´u.');
        }
    };

    return (
        <div class="container-fluid d-flex flex-column justify-content-center">
            <h2 class="text-center mb-4 mt-4">Upload b√†i tr·∫Øc nghi·ªám t·ª´ file Excel</h2>

            <div class="col-6 mx-auto p-4">
                <div class="mb-3 d-flex">
                    <div class="me-2 w-50">
                        <label class="form-label">T√™n m√¥n h·ªçc</label>
                        <input class="form-control" value={subjectName} onInput={(e) => setSubjectName(e.target.value)} />
                    </div>
                    <div class="w-50">
                        <label class="form-label">M√£ m√¥n h·ªçc (kh√¥ng d·∫•u c√°ch)</label>
                        <input class="form-control" value={subjectCode} onInput={(e) => setSubjectCode(e.target.value.trim())} />
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label">T·∫£i l√™n file Excel</label>
                    <input type="file" accept=".xlsx" class="form-control" onChange={handleFileChange} />
                </div>
                <div class="mb-3">
                    <button class="btn btn-link" type="button" onClick={handleDownloadTemplate}>
                        üìÑ T·∫£i file m·∫´u Excel
                    </button>
                </div>
                <div class="text-center">
                    <button class="btn btn-primary" onClick={handleUpload}>
                        Chuy·ªÉn ƒë·ªïi v√† hi·ªÉn th·ªã c√¢u h·ªèi
                    </button>
                </div>
                {message && <div class="alert alert-info mt-3 text-center">{message}</div>}

                {/* Hi·ªÉn th·ªã danh s√°ch c√¢u h·ªèi */}
                {questions.length > 0 && (
                    <div class="mt-4" style={{ maxHeight: '160px', overflowY: 'auto' }}>
                        <h5 class="text-center mb-3">üìã Danh s√°ch c√¢u h·ªèi ({questions.length})</h5>
                        <ul class="list-group">
                            {questions.map((q, idx) => (
                                <li key={idx} class="list-group-item">
                                    <strong>C√¢u {idx + 1}:</strong> {q.question}
                                    <ul class="mt-2">
                                        <li><strong>A:</strong> {q.a}</li>
                                        <li><strong>B:</strong> {q.b}</li>
                                        <li><strong>C:</strong> {q.c}</li>
                                        <li><strong>D:</strong> {q.d}</li>
                                        <li><strong>ƒê√°p √°n:</strong> {q.ans || '(ch∆∞a c√≥)'}</li>
                                    </ul>
                                </li>
                            ))}
                        </ul>
                    </div>
                )}

                {/* N√∫t t·∫£i v·ªÅ JSON */}
                {isDownloadEnabled && (
                    <div class="mt-3 text-center">
                        <button class="btn btn-success" onClick={handleDownloadJson}>
                            T·∫£i v·ªÅ JSON
                        </button>
                        <button class="btn btn-primary ms-2">
                            Post to server
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
}
